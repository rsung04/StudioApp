# E9 End-to-End Testing Plan: StudioApp API & Solver Service

**Objective:** This document provides a detailed, step-by-step guide for a test engineer to perform comprehensive end-to-end testing on the `studioapp-api` and verify the functionality of the `solver-service`.

**Testing Tools:** A REST API client like Postman or a command-line tool like `curl` is required. The base URL for the `studioapp-api` will be the Cloud Run deployment URL.

---

## Part 1: Prerequisite Data Setup

**Goal:** Before testing the solver, the database must be populated with the necessary foundational data. These steps must be performed in order. Store the `id` from each response, as it will be needed in subsequent requests.

### 1.1. Create an Organization

*   **Objective:** Create a top-level organization.
*   **Endpoint:** `POST /api/v1/organizations`
*   **Request Body:**
    ```json
    {
      "name": "Pole Fitness International"
    }
    ```
*   **Success Response (201 Created):**
    ```json
    {
      "id": 1,
      "name": "Pole Fitness International"
    }
    ```

### 1.2. Create a Studio Location

*   **Objective:** Create a physical location under the organization.
*   **Endpoint:** `POST /api/v1/studiolocations`
*   **Request Body:**
    ```json
    {
      "name": "Downtown Studio",
      "organizationId": 1
    }
    ```
*   **Success Response (201 Created):**
    ```json
    {
      "id": 1,
      "name": "Downtown Studio",
      "organizationId": 1
    }
    ```

### 1.3. Create a Room

*   **Objective:** Add a room to the studio location.
*   **Endpoint:** `POST /api/v1/rooms`
*   **Request Body:**
    ```json
    {
      "name": "Main Dance Hall",
      "capacity": 15,
      "studioLocationId": 1
    }
    ```
*   **Success Response (201 Created):**
    ```json
    {
      "id": 1,
      "name": "Main Dance Hall",
      "capacity": 15,
      "studioLocationId": 1
    }
    ```

### 1.4. Create an Instructor

*   **Objective:** Add an instructor to the organization.
*   **Endpoint:** `POST /api/v1/instructors`
*   **Request Body:**
    ```json
    {
      "firstName": "Jane",
      "lastName": "Doe",
      "organizationId": 1
    }
    ```
*   **Success Response (201 Created):**
    ```json
    {
      "id": 1,
      "firstName": "Jane",
      "lastName": "Doe",
      "organizationId": 1
    }
    ```

### 1.5. Create a Term

*   **Objective:** Define a scheduling term.
*   **Endpoint:** `POST /api/v1/terms`
*   **Request Body:**
    ```json
    {
      "name": "Fall 2025",
      "startDate": "2025-09-01",
      "endDate": "2025-12-20",
      "organizationId": 1
    }
    ```
*   **Success Response (201 Created):**
    ```json
    {
      "id": 1,
      "name": "Fall 2025",
      "startDate": "2025-09-01",
      "endDate": "2025-12-20",
      "organizationId": 1
    }
    ```

---

## Part 2: Solver API Testing (`studioapp-api`)

**Goal:** Test the solver initiation and status endpoints.

### 2.1. Test Case: Trigger Solver (Happy Path)

*   **Objective:** Verify that a solver job can be successfully queued.
*   **Endpoint:** `POST /api/v1/solver/run`
*   **Request Body:** (Using IDs from Part 1)
    ```json
    {
      "termId": 1,
      "organizationId": 1,
      "studioLocationId": 1
    }
    ```
*   **Success Response (202 Accepted):**
    ```json
    {
      "jobId": "some-unique-uuid-string",
      "status": "QUEUED",
      "message": "Solver job has been successfully queued. You can track its status using the provided jobId."
    }
    ```
    *(Note: The `jobId` will be a random UUID)*

### 2.2. Test Case: Trigger Solver with Locked Blocks

*   **Objective:** Verify a job can be queued with pre-assigned blocks.
*   **Endpoint:** `POST /api/v1/solver/run`
*   **Request Body:**
    ```json
    {
      "termId": 1,
      "organizationId": 1,
      "studioLocationId": 1,
      "lockedBlocks": [
        {
          "dayOfWeek": "MONDAY",
          "startHour": 18,
          "startMinute": 0,
          "endHour": 19,
          "endMinute": 0,
          "instructorId": 1,
          "roomId": 1
        }
      ]
    }
    ```
*   **Success Response (202 Accepted):** (Same structure as 2.1)

### 2.3. Test Case: Trigger Solver (Error: Invalid Term ID)

*   **Objective:** Verify a `404 Not Found` error for a non-existent term.
*   **Endpoint:** `POST /api/v1/solver/run`
*   **Request Body:**
    ```json
    {
      "termId": 999,
      "organizationId": 1,
      "studioLocationId": 1
    }
    ```
*   **Error Response (404 Not Found):**
    ```json
    {
      "timestamp": "YYYY-MM-DDTHH:mm:ss.sssZ",
      "status": 404,
      "error": "Not Found",
      "message": "Term with ID 999 not found.",
      "path": "/api/v1/solver/run"
    }
    ```

### 2.4. Test Case: Trigger Solver (Error: Missing Term ID)

*   **Objective:** Verify a `400 Bad Request` for a request missing a required field.
*   **Endpoint:** `POST /api/v1/solver/run`
*   **Request Body:**
    ```json
    {
      "organizationId": 1,
      "studioLocationId": 1
    }
    ```
*   **Error Response (400 Bad Request):**
    ```json
    {
      "timestamp": "YYYY-MM-DDTHH:mm:ss.sssZ",
      "status": 400,
      "error": "Bad Request",
      "message": "Validation failed: termId must not be null",
      "path": "/api/v1/solver/run"
    }
    ```

### 2.5. Test Case: Check Job Status

*   **Objective:** Verify the status of a job can be retrieved. (This endpoint needs to be implemented).
*   **Endpoint:** `GET /api/v1/solver/status/{jobId}` (Use a `jobId` from a previous run)
*   **Success Response (200 OK):**
    ```json
    {
      "jobId": "some-unique-uuid-string",
      "status": "COMPLETED",
      "createdAt": "2025-07-08T10:00:00Z",
      "completedAt": "2025-07-08T10:05:00Z",
      "resultsUrl": "/api/v1/terms/1/schedule"
    }
    ```
    *(Note: The `status` could also be `QUEUED`, `RUNNING`, or `FAILED` depending on the job's state.)*

---

## Part 3: `solver-service` Verification

**Goal:** The `solver-service` has no direct API. Its success is verified by observing its side effects.

### 3.1. Check Application Logs

*   **Objective:** Confirm the service received and processed the job.
*   **Action:**
    1.  Navigate to the Google Cloud Console.
    2.  Go to Cloud Run and select the `solver-service`.
    3.  View the logs.
*   **Expected Log Entries:**
    *   "Received Pub/Sub message with Job ID: [some-unique-uuid-string]"
    *   "Starting solver for Term ID: 1"
    *   "Fetching data from database..."
    *   "Solver finished. Found optimal solution."
    *   "Persisting X new scheduled events to the database."

### 3.2. Verify Database Records

*   **Objective:** Confirm the generated schedule was saved to the database.
*   **Action:**
    1.  Connect to the `studioapp-db` Cloud SQL instance.
    2.  Run a SQL query to check for new records.
*   **SQL Query:**
    ```sql
    SELECT * FROM scheduled_events WHERE term_id = 1;
    ```
*   **Expected Result:** The query should return a set of new rows representing the generated class schedule for the term.

---

## Part 4: General CRUD Endpoint Testing

**Goal:** Ensure all basic data management APIs are functional. The following is a template for testing one entity (`Instructor`). This process should be repeated for all other major entities (`ClassDefinition`, `Room`, `ClassType`, etc.).

### 4.1. Create (POST) - Already covered in setup.

### 4.2. Read All (GET)

*   **Endpoint:** `GET /api/v1/instructors`
*   **Success Response (200 OK):**
    ```json
    [
      {
        "id": 1,
        "firstName": "Jane",
        "lastName": "Doe",
        "organizationId": 1
      }
    ]
    ```

### 4.3. Read One (GET)

*   **Endpoint:** `GET /api/v1/instructors/1`
*   **Success Response (200 OK):**
    ```json
    {
      "id": 1,
      "firstName": "Jane",
      "lastName": "Doe",
      "organizationId": 1
    }
    ```

### 4.4. Update (PUT)

*   **Endpoint:** `PUT /api/v1/instructors/1`
*   **Request Body:**
    ```json
    {
      "firstName": "Jane",
      "lastName": "Smith"
    }
    ```
*   **Success Response (200 OK):**
    ```json
    {
      "id": 1,
      "firstName": "Jane",
      "lastName": "Smith",
      "organizationId": 1
    }
    ```

### 4.5. Delete (DELETE)

*   **Endpoint:** `DELETE /api/v1/instructors/1`
*   **Success Response (204 No Content):** (Empty Response Body)
